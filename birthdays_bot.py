import sqlite3
import asyncio
import logging
import pytz
from aiogram import Bot, Dispatcher, types, Router, BaseMiddleware
from aiogram.types import Message, TelegramObject
from aiogram.filters import Command
from datetime import datetime, timedelta
from random import choice
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TOKEN = "<BOT_TOKEN>" # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
GROUP_CHAT_ID = <YOUR_CHAT_ID>  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≥—Ä—É–ø–ø—ã
ADMIN_ID = <YOUR_TG_ID>  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à user_id

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler(timezone=pytz.timezone("Europe/Moscow"))

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
class AccessMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data):
        if isinstance(event, Message):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if event.from_user.id != ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
                await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.")
                return
        return await handler(event, data)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –∫ —Ä–æ—É—Ç–µ—Ä—É
router.message.middleware(AccessMiddleware())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect("birthdays.db")
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS birthdays (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            name TEXT NOT NULL,
                            username TEXT NOT NULL,
                            birthday DATE NOT NULL,
                            donation_link TEXT NOT NULL)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS greetings (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            text TEXT NOT NULL)''')
        conn.commit()
        conn.close()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_birthday(name: str, username: str, birthday: str, donation_link: str):
    conn = sqlite3.connect("birthdays.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO birthdays (name, username, birthday, donation_link) VALUES (?, ?, ?, ?)",
                   (name, username, birthday, donation_link))
    conn.commit()
    conn.close()

# –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
def get_random_greeting():
    conn = sqlite3.connect("birthdays.db")
    cursor = conn.cursor()
    cursor.execute("SELECT text FROM greetings ORDER BY RANDOM() LIMIT 1")
    greeting = cursor.fetchone()
    conn.close()
    return greeting[0] if greeting else "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
async def check_birthdays():
    logging.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")
    today = datetime.now().strftime("%m-%d")  # –¢–æ–ª—å–∫–æ –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å
    logging.info(f"üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –î–† –Ω–∞ {today}")

    conn = sqlite3.connect("birthdays.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, username, donation_link FROM birthdays WHERE strftime('%m-%d', birthday) = ?", (today,))
    birthdays = cursor.fetchall()
    conn.close()

    if not birthdays:
        logging.info("‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤.")
    else:
        for name, username, donation_link in birthdays:
            greeting = get_random_greeting()
            text = f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name} {username}! üéÇ\n\n{greeting}\n\n–°–±–æ—Ä –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ —Ç—É—Ç: {donation_link}"
            try:
                logging.info(f"üîÑ –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {name} –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}")
                await bot.send_message(GROUP_CHAT_ID, text)
                logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {name}")
            except Exception as e:
                logging.error(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
async def check_upcoming_birthdays():
    logging.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")
    today = datetime.now()
    next_week = (today + timedelta(days=7)).strftime("%m-%d")  # –¢–æ–ª—å–∫–æ –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å
    logging.info(f"üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –î–† –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é ({next_week})")

    conn = sqlite3.connect("birthdays.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, username, birthday FROM birthdays WHERE strftime('%m-%d', birthday) = ?", (next_week,))
    upcoming_birthdays = cursor.fetchall()
    conn.close()

    if not upcoming_birthdays:
        logging.info("‚ùå –ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤.")
    else:
        for name, username, birthday in upcoming_birthdays:
            text = f"üéâ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é {birthday} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name} {username}!"
            try:
                logging.info(f"üîÑ –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {name} –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç {ADMIN_ID}")
                await bot.send_message(ADMIN_ID, text)
                logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {name}")
            except Exception as e:
                logging.error(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
@router.message(Command("add"))
async def add_command(message: Message):
    args = message.text.split(maxsplit=4)
    if len(args) < 5:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add –ò–º—è @username –î–î.–ú–ú.–ì–ì–ì–ì —Å—Å—ã–ª–∫–∞_–Ω–∞_–¥–æ–Ω–∞—Ç")
        return

    name, username, birthday, donation_link = args[1], args[2], args[3], args[4]
    try:
        birthday = datetime.strptime(birthday, "%d.%m.%Y").strftime("%Y-%m-%d")
        await add_birthday(name, username, birthday, donation_link)
        await message.reply("‚úÖ –î–† –¥–æ–±–∞–≤–ª–µ–Ω!")
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_user
@router.message(Command("delete_user"))
async def delete_user_command(message: Message):
    if message.from_user.id != ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_user @username")
        return

    username = args[1]
    conn = sqlite3.connect("birthdays.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM birthdays WHERE username = ?", (username,))
    conn.commit()
    conn.close()

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_link
@router.message(Command("update_link"))
async def update_link_command(message: Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_link @username –Ω–æ–≤–∞—è_—Å—Å—ã–ª–∫–∞")
        return

    username, new_link = args[1], args[2]
    conn = sqlite3.connect("birthdays.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE birthdays SET donation_link = ? WHERE username = ?", (new_link, username))
    conn.commit()
    conn.close()

    await message.reply(f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è {username} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_name
@router.message(Command("update_name"))
async def update_name_command(message: Message):
    if message.from_user.id != ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_name @username –Ω–æ–≤–æ–µ_–∏–º—è")
        return

    username, new_name = args[1], args[2]
    conn = sqlite3.connect("birthdays.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE birthdays SET name = ? WHERE username = ?", (new_name, username))
    conn.commit()
    conn.close()

    await message.reply(f"‚úÖ –ò–º—è –¥–ª—è {username} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_name}!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_greeting
@router.message(Command("add_greeting"))
async def add_greeting_command(message: Message):
    greeting_text = message.text.split(maxsplit=1)[1]
    conn = sqlite3.connect("birthdays.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO greetings (text) VALUES (?)", (greeting_text,))
    conn.commit()
    conn.close()

    await message.reply("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
@router.message(Command("list"))
async def list_command(message: Message):
    if message.from_user.id != ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    conn = sqlite3.connect("birthdays.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, username, birthday FROM birthdays")
    users = cursor.fetchall()
    conn.close()

    if not users:
        await message.reply("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    response = "üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π:\n\n"
    for name, username, birthday in users:
        response += f"üë§ {name} -  {username} - {birthday}\n"

    await message.reply(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def help_command(message: Message):
    help_text = """
üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

/add - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add –ò–º—è @username –î–î.–ú–ú.–ì–ì–ì–ì —Å—Å—ã–ª–∫–∞_–Ω–∞_–¥–æ–Ω–∞—Ç
–ü—Ä–∏–º–µ—Ä: /add –ò–≤–∞–Ω–∞ @username 16.03.1991 https://example.com

/update_link - –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–Ω–∞—Ç
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_link @username –Ω–æ–≤–∞—è_—Å—Å—ã–ª–∫–∞
–ü—Ä–∏–º–µ—Ä: /update_link @username https://newlink.com

/update_name - –û–±–Ω–æ–≤–∏—Ç—å –∏–º—è
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_name @username –Ω–æ–≤–æ–µ_–∏–º—è
–ü—Ä–∏–º–µ—Ä: /update_name @username –ò–≤–∞–Ω–∞

/delete_user - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_user @username
–ü—Ä–∏–º–µ—Ä: /delete_user @username

/add_greeting - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_greeting —Ç–µ–∫—Å—Ç_–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
–ü—Ä–∏–º–µ—Ä: /add_greeting –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, –±—Ä–æ! üéâ

/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
    """
    await message.reply(help_text)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∑–∞–¥–∞—á
async def main():
    init_db()
    logging.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.add_job(check_birthdays, "cron", hour=9, minute=0, timezone="Europe/Moscow")
    logging.info("‚úÖ –ó–∞–¥–∞—á–∞ check_birthdays –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
    scheduler.add_job(check_upcoming_birthdays, "cron", hour=9, minute=0, timezone="Europe/Moscow")
    logging.info("‚úÖ –ó–∞–¥–∞—á–∞ check_upcoming_birthdays –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")

    # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥)
#    scheduler.add_job(check_birthdays, "date", run_date=datetime.now() + timedelta(seconds=10))
#    logging.info("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥)")

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    logging.info("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
    logging.getLogger('apscheduler').setLevel(logging.DEBUG)
    asyncio.run(main())
